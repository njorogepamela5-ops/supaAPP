"use client"; // Required for hooks like useState and useEffect
import { useState, useEffect } from "react";
import { supabase } from "../../lib/supabaseClient";

export default function CartPage() {
  const [cart, setCart] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchCart();
  }, []);

  async function fetchCart() {
    setLoading(true);
    const userId = "CURRENT_USER_UUID"; // Replace with actual logged-in user ID
    const { data, error } = await supabase
      .from("cart")
      .select("id, quantity, product_id, products(name, price)")
      .eq("user_id", userId)
      .order("created_at", { ascending: false });

    if (error) console.log("Error fetching cart:", error);
    else setCart(data || []);
    setLoading(false);
  }

  async function removeFromCart(cartId: string) {
    const { error } = await supabase.from("cart").delete().eq("id", cartId);
    if (error) console.log("Error deleting item:", error);
    else fetchCart();
  }

  if (loading) return <p>Loading cart...</p>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Your Cart</h1>
      {cart.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <ul>
          {cart.map((item: any) => (
            <li key={item.id} className="mb-4 flex justify-between items-center">
              <div>
                {item.products.name} - {item.quantity} x {item.products.price} KES
              </div>
              <button
                className="px-3 py-1 bg-red-500 text-white rounded"
                onClick={() => removeFromCart(item.id)}
              >
                Remove
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
// app/cart/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

interface CartItem {
  id: number;
  name: string;
  price: number;
  quantity: number;
}

export default function Cart() {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const router = useRouter();

  // Example: Add dummy item to test
  const addDummyItem = () => {
    const newItem: CartItem = {
      id: Date.now(),
      name: "Sample Product",
      price: 10,
      quantity: 1,
    };
    setCartItems([...cartItems, newItem]);
  };

  const removeItem = (id: number) => {
    setCartItems(cartItems.filter((item) => item.id !== id));
  };

  const total = cartItems.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0
  );

  return (
    <main className="min-h-screen p-6 bg-gray-50">
      <h1 className="text-3xl font-bold mb-6">Cart</h1>

      {cartItems.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <div className="space-y-4">
          {cartItems.map((item) => (
            <div
              key={item.id}
              className="flex justify-between items-center p-4 border rounded bg-white"
            >
              <div>
                <h2 className="text-xl font-semibold">{item.name}</h2>
                <p>Quantity: {item.quantity}</p>
              </div>
              <div>
                <p className="text-green-600 font-bold">${item.price}</p>
                <button
                  onClick={() => removeItem(item.id)}
                  className="text-red-600 ml-4"
                >
                  Remove
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      <div className="mt-6">
        <p className="text-xl font-bold">Total: ${total}</p>
        <button
          className="mt-4 px-4 py-2 bg-blue-600 text-white rounded"
          onClick={() => alert("Proceeding to checkout...")}
        >
          Checkout
        </button>
      </div>

      <button
        className="mt-6 px-4 py-2 bg-green-600 text-white rounded"
        onClick={addDummyItem}
      >
        Add Dummy Product
      </button>
    </main>
  );
}
import { supabase } from '@/lib/supabaseClient';
import toast from 'react-hot-toast';

async function addToCart(productId: string, quantity: number) {
  const { data, error } = await supabase
    .from('cart')
    .insert([{ product_id: productId, quantity }]);

  if (error) {
    toast.error('Failed to add item.');
  } else {
    toast.success('Item added to cart!');
  }
}
async function checkout(cart: any[]) {
  try {
    if (!cart || cart.length === 0) {
      alert("Your cart is empty!");
      return;
    }

    // Calculate total
    const total = cart.reduce((acc, item) => acc + item.quantity * item.products.price, 0);

    // Prompt user for phone number
    const phone = prompt("Enter your phone number (e.g., 2547XXXXXXXX)");
    if (!phone) {
      alert("Phone number is required for checkout.");
      return;
    }

    // Call your STK push or payment function here
    const response = await fetch("/api/stk_push", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        phone,
        amount: total,
        cart,
      }),
    });

    const result = await response.json();
    console.log("Payment response:", result);

    if (result.success) {
      alert("Payment initiated successfully!");
    } else {
      alert("Payment failed. Please try again.");
    }
  } catch (error) {
    console.error("Checkout error:", error);
    alert("An error occurred during checkout.");
  }
}
